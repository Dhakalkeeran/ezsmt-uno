cspdomain(fd).

%%%%%%%%%%%%%%%%%% accelerate

action(accelerate).
instantaneous(accelerate).

% impossible if not running or if v>=up_limit
:- step(I),
   occurs(accelerate,I),
   hold_s(running,I).

required(v(v,I)<UPL) :-
	step(I),
	occurs(accelerate,I),
	uplimit(UPL).

required(v(v,I2)==v(v,I1)+1) :-
	step(I1), step(I2), I2=I1+1,
	occurs(accelerate,I1).

ab(v,I) :-
	step(I),
	occurs(accelerate,I).

%%%%%%%%%%%%%%%%%% decelerate

action(decelerate).
instantaneous(decelerate).

% impossible if not running or if v<=down_limit
:- step(I),
   occurs(decelerate,I),
   hold_s(running,I).

required(v(v,I)>DWL) :-
	step(I),
	occurs(decelerate,I),
	downlimit(DWL).

required(v(v,I2)==v(v,I1)-1) :-
	step(I1), step(I2), I2=I1+1,
	occurs(decelerate,I1).

ab(v,I) :-
	step(I),
	occurs(decelerate,I).


% INERTIA for quant fluents, specialized to v for now
%
required(v(v,I2)==v(v,I1)) :-
	step(I1), step(I2), I2=I1+1,
	not ab(v,I1).
%%%%%%%%%%%%%%%%%% general
%

% fluents: quant: start(I), end(I), v
%cspvar(start(I),0,MI) :- step(I), maxintval(MI).
%cspvar(end(I),0,MI) :- step(I), maxintval(MI).
cspvar(start(I)) :- step(I).
required(start(I)>=0) :- step(I).
cspvar(end(I)) :- step(I).
required(end(I)>=0) :- step(I).
cspvar(v(v,I)) :- step(I).

% start(I+1) == end(I) for every step I
required(start(I2)==end(I1)) :- step(I1), step(I2), I2=I1+1.
required(end(I)>=start(I)) :- step(I).


% inertia
holds(F,I2) :-
	fluent(F),
	step(I1), step(I2), I2=I1+1,
	holds(F,I1),
	not hold_s(F,I2).

hold_s(F,I2) :-
	fluent(F),
	step(I1), step(I2), I2=I1+1,
	hold_s(F,I1),
	not holds(F,I2).

% fluents: quant: v_initial(d), v_final(d)
cspvar(v_initial(d,I)) :- step(I).
%required(v_initial(d,I)>=0) :- step(I).
%required(v_initial(d,I)<=TC) :- step(I), tankcap(TC).

cspvar(v_final(d,I)) :- step(I).
%required(v_final(d,I)>=0) :- step(I).
%required(v_final(d,I)<=TC) :- step(I), tankcap(TC).


% v_initial(d,I+1)=v_final(d,I)
required(v_initial(d,I2)==v_final(d,I1)) :-
	step(I1), step(I2), I2=I1+1.


% d is changed by the velocity
%
% v_final(d,I)=v_initial(d,I) + (end(I)-start(I)*v(I)
required(v_final(d,I)==v_initial(d,I)+(end(I)-start(I))*v(v,I)) :-
	step(I).

%%%%%%%%%%%%%%%%%% moving

% fluents: bool: inprogr(moving), quant: stime(moving) d
fluent(inprogr(moving)).

cspvar(stime(moving)).
required(stime(moving)>=0).

% actions: start(moving), end(moving)
action(start(moving)).
action(end(moving)).

% MUST SEMANTICS (simplified, since there are no numerical conditions)
occurs(start(moving),I) :- step(I), I<3, holds(running,I), hold_s(inprogr(moving),I).

% Because generate is durative, it must stop at some point after starting
1{ occurs(end(moving),I2) : step(I2), I2 > I1, I2 < 3 }1 :-
	step(I),
	occurs(start(moving),I1).
% workarond: clingcon does not handle the above choice rule if the set of choices is empty
:- using_clingcon, step(I1), occurs(start(moving),I1), I1>=3-1.

% moving cannot end if it isn't in progress
:- step(I),
   occurs(end(moving),I),
   hold_s(inprogr(moving),I).

% DURATION CONSTRAINT ON moving
%
% NOTE: end(moving) corresponds to event dist_travelled in the PDDL+ encoding
%
% the time elapsed between start(moving) and end(moving) must be exactly what specified
required(v_final(d,I)==D) :-
	step(I), duration(moving,D),
	occurs(end(moving),I).
required(v(v,I)==0) :-
	step(I),
	occurs(end(moving),I).


% start(moving) causes
% 	inprogr(moving)=true
%	stime(moving)=end(I)
holds(inprogr(moving),I2) :-
	step(I1), step(I2), I2=I1+1,
	occurs(start(moving),I1).

required(stime(moving)==end(I1)) :-
	step(I1), step(I2), I2=I1+1,
	occurs(start(moving),I1).

% end(moving) causes
% 	inprogr(moving)=false
% 	running=false
hold_s(inprogr(moving),I2) :-
	step(I1), step(I2), I2=I1+1,
	occurs(end(moving),I1).

hold_s(running,I2) :-
	step(I1), step(I2), I2=I1+1,
	occurs(end(moving),I1).

%%%%%%%%%%%%%%%%%% output formatting
%

% A is a macro action (maction) if
% actions start(A) and end(A) exist.
maction(A) :- action(start(A)), action(end(A)).

% quantitative fluent dur(I): duration of step (I)
cspvar(dur(I),0,MI) :- step(I), maxintval(MI).

required(dur(I)==end(I)-start(I)) :- step(I).


% quantitative fluent adur(A): duration of action A
cspvar(adur(A),0,MI) :- maction(A), occurs(start(A),I1), occurs(end(A),I2), maxintval(MI).

required(adur(A)==end(I2)-end(I1)) :-
	step(I1), step(I2),
	maction(A),
	occurs(start(A),I1),
	occurs(end(A),I2).

% Special treatment for instantaneous actions
instoccurs(iact(A,I),I) :- instantaneous(A), occurs(A,I).

cspvar(adur(iact(A,I)),0,MI) :- instantaneous(A), occurs(A,I), maxintval(MI).
cspvar(stime(iact(A,I)),0,MI) :- instantaneous(A), occurs(A,I), maxintval(MI).
required(adur(iact(A,I))==0) :-
	step(I),
	instantaneous(A),
	occurs(A,I).

required(stime(iact(A,I))==end(I)) :-
	step(I),
	instantaneous(A),
	occurs(A,I).

%%%%%%%%%%%%%%%%%% planner


% we are not equipped for multiple starts of moving
:- occurs(start(moving),I1), occurs(start(moving),I2), I1!=I2.

% planning: we can accelerate or decelerate
0{ occurs(accelerate,I); occurs(decelerate,I) }1 :- step(I).

% to preserve the semantics of processes, no actions are allowed while a process is terminating
:- occurs(end(moving),I), occurs(A,I), A!=end(moving).

% HEURISTIC: there should always be somme action between two states
% See below for its effect on performance.
some_action(I) :-
	step(I),
	occurs(_,I).
:- step(I), I < 3, not some_action(I).
