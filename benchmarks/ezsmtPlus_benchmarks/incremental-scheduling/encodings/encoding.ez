cspdomain(fd).


cspvar(st(D,J),0,MT) :-
	device(D),
	job(J),
	job_device(J,D),
	max_value(MT).

label_order(st(D,J),1) :-
	device(D), 
	job_device(J,D).

cspvar(start(J),0,MT) :-
	job(J),
	max_value(MT).

required(start(J)==st(D,J)) :-
	job(J),
	job_device(J,D).

%----------------------
% - overlap
%----------------------

required(start(J1) > start(J2) \/ start(J2) >= start(J1) + L1) :- 
    on_instance(J1,I), on_instance(J2,I), J1 != J2,
    job_device(J1,D), job_device(J2,D),
    job_len(J1,L1).

%    required(start(J1) =< start(J2) /\ start(J2) < start(J1) + L1). 

%    required(start(J1) =< start(J2)), job_len(J1,L1),
%    required(start(J2) < start(J1) + L1). 
%, required(start(J1) + L1 =< MT), max_value(MT).
              

%required(cumulative([st(D)/2],[operation_len_by_dev(D)/3],[operation_res_by_dev(D)/3],N)) :-
%	instances(D,N).

%operation_len_by_dev(D,J,N) :-
%	job(J),
%	device(D),
%    job_device(J,D),
%    job_len(J,N).

%operation_res_by_dev(D,J,1) :-
%	job(J),
%	device(D),
%    job_device(J,D).


%----------------------
%     - order
%----------------------

required(st(D2,J2) >= st(D1,J1) + L1) :-
	job(J1),
	job(J2),
	device(D),
	precedes(J1,J2),
	job_device(J1,D1),
	job_device(J2,D2),
	job_len(J1,L1).


%-------------------------------------
%     - completion -- total-tardiness
%-------------------------------------

cspvar(td(J),0,MV) :-
	job(J),
	max_value(MV).

%%%%%%%%%%%%%%%%%%
required(td(J) == max(0,st(D,J) + Len - Deadline)) :-
	job(J),
	device(D),
	job_device(J,D),
	deadline(J,Deadline),
	job_len(J,Len).


%-------------------------------------
%     - completion -- penalty
%-------------------------------------

cspvar(penalty(J),0,MV) :-
	job(J),
	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
	max_value(MV).

required(penalty(J) == td(J) * Weight ) :-
	job(J),
	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
	importance(J,Weight).

cspvar(tot_penalty,0,MV) :-
	max_value(MV).

%%%%%%%%%%%%
required(sum([penalty/1],==,tot_penalty)).

required(tot_penalty =< K) :-
	max_total_penalty(K).


%----------------------
%     - instance assignment
%----------------------
instance_of(D,1) :- device(D).
instance_of(D,I+1) :- device(D), instance_of(D,I), instances(D,N), I < N.

1 { on_instance(J,I) : instance_of(D,I) } 1 :- job(J), job_device(J,D).%, not checking_solution.


required((st(D,J2) >= st(D,J1) + Len1) \/ 
	 (st(D,J1) >= st(D,J2) + Len2)) :-
	on_instance(J1,I),
	on_instance(J2,I), 	
	device(D),
	instances(D,N), N > 1,
 	job(J1),
	job(J2),
	job_device(J1,D),
	job_device(J2,D),
	J1 != J2,
	job_len(J1,Len1),
	job_len(J2,Len2).

:- on_instance(J,N),
	device(D),
	job(J),
	job_device(J,D),
	offline_instance(D,N),
	must_schedule(J).


%----------------------
% - current schedule
%----------------------

already_started(J) :-
	curr_job_start(J,S),
	curr_time(CT),
	CT > S.

already_finished(J) :-
	curr_job_start(J,S),
	job_len(J,L),
	curr_time(CT),
	CT >= S + L.

must_schedule(J) :-
	job(J),
	not must_not_schedule(J).

must_not_schedule(J) :-
	already_started(J),
	not production_failed(J).

rescheduled(J) :-
	production_failed(J).

production_failed(J) :-
	already_started(J),
	not already_finished(J),
	job_device(J,D),
	curr_on_instance(J,I),
	offline_instance(D,I).

required(st(D,J) >= CT) :-
	device(D),
	job_device(J,D),
	curr_time(CT),
	must_schedule(J).

required(st(D,J) == T) :-
	job_device(J,D),
	curr_job_start(J,T),
	must_not_schedule(J).

:-  on_instance(J,I1), I1!= I,
	curr_on_instance(J,I),
	must_not_schedule(J).
