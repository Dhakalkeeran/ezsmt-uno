EXPERIMENT
----------
Initial state: location  (0cm,0cm), facing the direction of the positive x axis

Goal: reach location (150cm,150cm) by only executing 90 degree turns and stop there

Fault: when stop(r,fwd) occurs, the agent waits for the end of the state (time step 2) and 
       then senses that the robot is unexpectedly at (80cm, 0cm).

Solution: the agent hypothesizes that the battery level was initially lower than 100%.
          It calculates the correct value. Then, it uses it for re-planning.
	  The updated plan has the agent go forward a little more to reach (150cm,0cm),
	  then turn left by 90 degrees and then go forward to (150cm,150cm).

=================================================
IMPLEMENTATION NOTES

0. To plan/replan, use:
    ezcsp --mkatoms --gams:knitro <file with #const n and curr_step> instICAPS.ez <observations file> <hypotheses file> goalICAPS.ez pl_heur.ez pioneerBasic.ez plan.ez

   To check for unexpected observations, use:
    ezcsp --mkatoms --gams:knitro <file with #const n and curr_step> instICAPS.ez <observations file> <hypotheses file> pioneerBasic.ez check.ez

   To explain unexpected observations, use:
    ezcsp --mkatoms --gams:knitro <file with #const n and curr_step> instICAPS.ez <observations file> <hypotheses file> pioneerBasic.ez diag-min.ez

   Examples files with the information for the key phases of the experiments are:
    
    planning/instBasic3.ez   -->  First planning task  (complete file)
    diagnosis/instBasic1.ez  -->  Unexpected obs task (first) and diagnostic task (next)  (complete file)
    planning/instBasic4.ez   -->  Re-planning task  (complete file)

   My guesses as to how the agent will be running ezcsp (files included):
   
   First plan:
    ezcsp --mkatoms --gams:knitro init3 instICAPS.ez obs3 goalICAPS.ez pl_heur.ez pioneerBasic.ez plan.ez
 
   Checking:
    ezcsp --mkatoms --gams:knitro init1 instICAPS.ez obs1 pioneerBasic.ez check.ez
     
   Diagnosis:
    ezcsp --mkatoms --gams:knitro init1 instICAPS.ez obs1 pioneerBasic.ez diag-min.ez

   Replanning:
    ezcsp --mkatoms --gams:knitro init4 instICAPS.ez obs4 goalICAPS.ez pl_heur.ez pioneerBasic.ez plan.ez


1. When the first plan is returned, initialize the "absolute time" of the agent loop to
   the time of tend(0).

2. When executing an action from a plan, store the action's occurrence and the tend(_) value of
   its time step into the file where the observations are kept. For example, after stop(r,fwd) is
   executed at time step 1, the file should contain:

	o(start(r,fwd),0).
	required(tend(0)="34.83751626").
	o(stop(r,fwd),1).
	required(tend(1)="40.33404215").

  Note that the values for tend(_) depend on whatever the planner decided to return, so make sure
  not to hard-code them.

3. When running the unexplained_obs check and the diagnostic module, set n to the value of curr_step.

4. We will only observe x(r) and y(r) at the end of the state following the execution of
   stop(r,fwd). That is, if the action occurs at 1, we take the observations at the end of step 2.
   Have the simulated sensor return "80" for x and "0" for y:

	obs(v_final(x(r), 2),"80").
	obs(v_final(y(r), 2),"0").

   Store that observation in the OBSERVATIONS file.
   In the same file, also store the tend value of the time step of the observtion.
   Let us assume that the observation is taken at the end of the state, so for tend(_)
   you can use the value of the agent's "absolute time", which should be the same
   as the value of tend(2) from the plan that the planner had returned.
   That is, you will find yourselves storing into the OBSERVATIONS file something like:
   
	required(tend(2)=="59.01938237").

5. When copying the output of the diagnostic module to the HYPOTHESES file, only add 
   the ab(assumed_value,...) and o(...) atoms returned by the diag module.
   Don't add the values of the numerical fluents that are part of the explanation.
   Note: it is ok to have duplication of o(...) atoms between OBSERVATIONS and HYPOTHESES.
   Example: (this is the hypothesis generated by the diagnostic module in our experiment)

	ab(assumed_value,b_lvl(r)).

   Note: you don't need to worry about o(...) explanations in this experiment.

