%$domain(0..MV) :- max_value(MV).


%st(D,J)$>=0 $and st(D,J)$<=MT :-
%	device(D),
%	job(J),
%	job_device(J,D),
%	max_value(MT).
mgeq(1,st(D,J),0) :-
	device(D),
	job(J),
	job_device(J,D),
	max_value(MT).
mleq(1,st(D,J),MT) :-
	device(D),
	job(J),
	job_device(J,D),
	max_value(MT).

%start(J)$>=0 $and start(J)$<=MT :-
%	job(J),
%	max_value(MT).
mgeq(1,start(J),0) :-
	job(J),
	max_value(MT).
mleq(1,start(J),MT) :-
	job(J),
	max_value(MT).

%start(J)$==st(D,J) :-
%	job(J),
%	job_device(J,D).
mgeq(1,start(J),-1,st(D,J),0) :-
	job(J),
	job_device(J,D).
mleq(1,start(J),-1,st(D,J),0) :-
	job(J),
	job_device(J,D).

%----------------------
% - overlap
%----------------------

%:- on_instance(J1,I), on_instance(J2,I), J1 != J2,
%   job_device(J1,D), job_device(J2,D),
%   start(J1)$<=start(J2), job_len(J1,L1),
%   start(J2) $< start(J1) $+ L1.
:- on_instance(J1,I), on_instance(J2,I), J1 != J2,
   job_device(J1,D), job_device(J2,D),
   mleq(1,start(J1),-1,start(J2),0), 
   job_len(J1,L1),
   mlt(1,start(J2),-1,start(J1), L1).

%----------------------
%     - order
%----------------------

%st(D2,J2) $>= st(D1,J1) $+ L1 :-
%	job(J1),
%	job(J2),
%	device(D),
%	precedes(J1,J2),
%	job_device(J1,D1),
%	job_device(J2,D2),
%	job_len(J1,L1).
mgeq(1,st(D2,J2),-1,st(D1,J1), L1) :-
	job(J1),
	job(J2),
	device(D),
	precedes(J1,J2),
	job_device(J1,D1),
	job_device(J2,D2),
	job_len(J1,L1).



%-------------------------------------
%     - completion -- total-tardiness
%-------------------------------------

%td(J)$>=0 $and td(J)$<= MV :-
%	job(J),
%	max_value(MV).
mgeq(1,td(J),0) :-
	job(J),
	max_value(MV).
mleq(1,td(J), MV) :-
	job(J),
	max_value(MV).



%td(J) $== $max{0,st(D,J) $+ Len $- Deadline} :-
%	job(J),
%	device(D),
%	job_device(J,D),
%	deadline(J,Deadline),
%	job_len(J,Len).

%max translation
%td(J) $== 0 :-
%	st(D,J) $+ Len $- Deadline$<=0,
%	job(J),
%	device(D),
%	job_device(J,D),
%	deadline(J,Deadline),
%	job_len(J,Len).
mgeq(1,td(J),0) :-
	mleq(1,st(D,J), Deadline - Len),
	job(J),
	device(D),
	job_device(J,D),
	deadline(J,Deadline),
	job_len(J,Len).
mleq(1,td(J),0) :-
	mleq(1,st(D,J), Deadline - Len),
	job(J),
	device(D),
	job_device(J,D),
	deadline(J,Deadline),
	job_len(J,Len).

%td(J) $- st(D,J) $==  Len $- Deadline :-
%	st(D,J) $+ Len $- Deadline $> 0,
%	job(J),
%	device(D),
%	job_device(J,D),
%	deadline(J,Deadline),
%	job_len(J,Len).
mgeq(1,td(J),-1,st(D,J), Len - Deadline) :-
	mgt(1,st(D,J), Deadline - Len),
	job(J),
	device(D),
	job_device(J,D),
	deadline(J,Deadline),
	job_len(J,Len).
mleq(1,td(J),-1,st(D,J), Len - Deadline) :-
	mgt(1,st(D,J), Deadline - Len),
	job(J),
	device(D),
	job_device(J,D),
	deadline(J,Deadline),
	job_len(J,Len).


%-------------------------------------
%     - completion -- penalty
%-------------------------------------
%penalty(J)$>=0 $and penalty(J)$<= MV :-
%	job(J),
%	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
%	max_value(MV).
mgeq(1,penalty(J),0) :-
	job(J),
	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
	max_value(MV).
mleq(1,penalty(J), MV) :-
	job(J),
	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
	max_value(MV).


%penalty(J) $- td(J) $* Weight $== 0  :-
%	job(J),
%	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
%	importance(J,Weight).

mgeq(1,penalty(J),-Weight, td(J), 0)  :-
	job(J),
	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
	importance(J,Weight).
mleq(1,penalty(J),-Weight, td(J), 0)  :-
	job(J),
	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
	importance(J,Weight).


%tot_penalty$>=0 $and tot_penalty$<=MV :-
%	max_value(MV).
mgeq(1,tot_penalty,0) :-
	max_value(MV).
mleq(1,tot_penalty,MV):-
	max_value(MV).


% $sum{penalty(J): job(J)} $==tot_penalty.

% total_jobs(/1) added to each instance.
max_jobs(75).

mgeq(1,penalty(N),0):-
    N=MIN+1..MAX,
    total_jobs(MIN),
    max_jobs(MAX).
mleq(1,penalty(N),0):-
    N=MIN+1..MAX,
    total_jobs(MIN),
    max_jobs(MAX).

mgeq(1,penalty(1),1,penalty(2),1,penalty(3),1,penalty(4),1,penalty(5),1,penalty(6),1,penalty(7),1,penalty(8),1,penalty(9),1,penalty(10),1,penalty(11),1,penalty(12),1,penalty(13),1,penalty(14),1,penalty(15),1,penalty(16),1,penalty(17),1,penalty(18),1,penalty(19),1,penalty(20),1,penalty(21),1,penalty(22),1,penalty(23),1,penalty(24),1,penalty(25),1,penalty(26),1,penalty(27),1,penalty(28),1,penalty(29),1,penalty(30),1,penalty(31),1,penalty(32),1,penalty(33),1,penalty(34),1,penalty(35),1,penalty(36),1,penalty(37),1,penalty(38),1,penalty(39),1,penalty(40),1,penalty(41),1,penalty(42),1,penalty(43),1,penalty(44),1,penalty(45),1,penalty(46),1,penalty(47),1,penalty(48),1,penalty(49),1,penalty(50),1,penalty(51),1,penalty(52),1,penalty(53),1,penalty(54),1,penalty(55),1,penalty(56),1,penalty(57),1,penalty(58),1,penalty(59),1,penalty(60),1,penalty(61),1,penalty(62),1,penalty(63),1,penalty(64),1,penalty(65),1,penalty(66),1,penalty(67),1,penalty(68),1,penalty(69),1,penalty(70),1,penalty(71),1,penalty(72),1,penalty(73),1,penalty(74),1,penalty(75),-1,tot_penalty,0).
mleq(1,penalty(1),1,penalty(2),1,penalty(3),1,penalty(4),1,penalty(5),1,penalty(6),1,penalty(7),1,penalty(8),1,penalty(9),1,penalty(10),1,penalty(11),1,penalty(12),1,penalty(13),1,penalty(14),1,penalty(15),1,penalty(16),1,penalty(17),1,penalty(18),1,penalty(19),1,penalty(20),1,penalty(21),1,penalty(22),1,penalty(23),1,penalty(24),1,penalty(25),1,penalty(26),1,penalty(27),1,penalty(28),1,penalty(29),1,penalty(30),1,penalty(31),1,penalty(32),1,penalty(33),1,penalty(34),1,penalty(35),1,penalty(36),1,penalty(37),1,penalty(38),1,penalty(39),1,penalty(40),1,penalty(41),1,penalty(42),1,penalty(43),1,penalty(44),1,penalty(45),1,penalty(46),1,penalty(47),1,penalty(48),1,penalty(49),1,penalty(50),1,penalty(51),1,penalty(52),1,penalty(53),1,penalty(54),1,penalty(55),1,penalty(56),1,penalty(57),1,penalty(58),1,penalty(59),1,penalty(60),1,penalty(61),1,penalty(62),1,penalty(63),1,penalty(64),1,penalty(65),1,penalty(66),1,penalty(67),1,penalty(68),1,penalty(69),1,penalty(70),1,penalty(71),1,penalty(72),1,penalty(73),1,penalty(74),1,penalty(75),-1,tot_penalty,0).

%tot_penalty $<= K :-
%	max_total_penalty(K).
mleq(1,tot_penalty, K) :-
	max_total_penalty(K).


%----------------------
%     - instance assignment
%----------------------
instance_of(D,1) :- device(D).
instance_of(D,I+1) :- device(D), instance_of(D,I), instances(D,N), I < N.

1 { on_instance(J,I) : instance_of(D,I) } 1 :- job(J), job_device(J,D).%, not checking_solution.

% Verify
%st(D,J2) $>= st(D,J1) $+ Len1 $or 
%	 st(D,J1) $>= st(D,J2) $+ Len2 :-
:-
    mlt(-1,st(D,J1),1,st(D,J2), Len1),
    mlt(-1,st(D,J2),1,st(D,J1), Len2),
	on_instance(J1,I),
	on_instance(J2,I), 	
	device(D),
	instances(D,N), N > 1,
 	job(J1),
	job(J2),
	job_device(J1,D),
	job_device(J2,D),
	J1 != J2,
	job_len(J1,Len1),
	job_len(J2,Len2).

:- on_instance(J,N),
	device(D),
	job(J),
	job_device(J,D),
	offline_instance(D,N),
	must_schedule(J).


%----------------------
% - current schedule
%----------------------

already_started(J) :-
	curr_job_start(J,S),
	curr_time(CT),
	CT > S.

already_finished(J) :-
	curr_job_start(J,S),
	job_len(J,L),
	curr_time(CT),
	CT >= S + L.

must_schedule(J) :-
	job(J),
	not must_not_schedule(J).

must_not_schedule(J) :-
	already_started(J),
	not production_failed(J).

rescheduled(J) :-
	production_failed(J).

production_failed(J) :-
	already_started(J),
	not already_finished(J),
	job_device(J,D),
	curr_on_instance(J,I),
	offline_instance(D,I).

%st(D,J) $>= CT :-
%	device(D),
%	job_device(J,D),
%	curr_time(CT),
%	must_schedule(J).

mgeq(1,st(D,J), CT) :-
	device(D),
	job_device(J,D),
	curr_time(CT),
	must_schedule(J).


%st(D,J) $== T :-
%	job_device(J,D),
%	curr_job_start(J,T),
%	must_not_schedule(J).

mgeq(1,st(D,J), T) :-
	job_device(J,D),
	curr_job_start(J,T),
	must_not_schedule(J).
mleq(1,st(D,J), T) :-
	job_device(J,D),
	curr_job_start(J,T),
	must_not_schedule(J).

:-  on_instance(J,I1), I1!= I,
	curr_on_instance(J,I),
	must_not_schedule(J).
