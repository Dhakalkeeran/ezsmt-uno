%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% A CASP program of 2 dimensional strip packing problem
% @author Mutsunori Banbara
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% X-coordinates
%int(x(I), 0, W-X) :- r(I,X,Y), width(W).
%&dom{0..U} = x(I) :- r(I,X,Y), width(W), U=W-X.
ub(x(I),U):- r(I,X,Y), width(W), U=W-X.
#var $x(I) : ub(x(I),U) = 0..U.

% Y-coordinates
%int(y(I), 0, ub-Y) :- r(I,X,Y).
%&dom{0..U} = y(I) :- r(I,X,Y), U=ub-Y.
ub(y(I),U) :- r(I,X,Y), U=ub-Y.
#var $y(I) : ub(y(I),U) = 0..U.

% Not-overlapping constraints
1 { le(x(I),XI,x(J)),
    le(x(J),XJ,x(I)), 
    le(y(I),YI,y(J)), 
    le(y(J),YJ,y(I)) } :- r(I,XI,YI), r(J,XJ,YJ), I < J.

    dom(y(J),YJ,y(I)) :- r(I,XI,YI), r(J,XJ,YJ), I < J.
    dom(y(I),YI,y(J)) :- r(I,XI,YI), r(J,XJ,YJ), I < J.
    dom(x(J),XJ,x(I)) :- r(I,XI,YI), r(J,XJ,YJ), I < J.
    dom(x(I),XI,x(J)) :- r(I,XI,YI), r(J,XJ,YJ), I < J.

% X+C <= Y
%weightedsum(op(le,op(add,op(mul,1,X),op(mul,-1,Y)),-C)) :- le(X,C,Y).
%&sum{X; -Y} <= -C :- le(X,C,Y).
:- le(x(X),C,x(Y)), not #linear [$x(X), -1 * $x(Y)] -C.
:- le(y(X),C,y(Y)), not #linear [$y(X), -1 * $y(Y)] -C.

:- dom(x(X),C,x(Y)), not le(x(X),C,x(Y)), #linear [$x(X), -1 * $x(Y)] -C.
:- dom(y(X),C,y(Y)), not le(y(X),C,y(Y)), #linear [$y(X), -1 * $y(Y)] -C.




%%%%%%%%%%%%%%%1st version

#var $height = lb..ub.
#linear [$y(I),-1 * $height] -Y :- r(I,X,Y).
%&sum{y(I);Y} <= height :- r(I,X,Y).



%%%%%%%%%%%%%%2nd version


%#minimize [$height].
opt(X) :- $height #>= X, X=lb..ub.
#minimize [opt(X)].
%#minimize [$height #>= X : X=lb+1..ub.
%&show {height}.





